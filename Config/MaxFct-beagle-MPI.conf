<?xml version="1.0" encoding="ISO-8859-1"?>
<Beagle version="3.0.3">
  <!-- Created by a configuration dump -->
  <!-- Evolver: configuration of the algorithm -->
  <Evolver>
    <BootStrapSet>
      <IfThenElseOp parameter="ms.restart.file" value="">
        <PositiveOpSet>
          <GA-InitBitStrOp repropb="ec.repro.prob"/>
          <MaxFctEvalOp/>
          <StatsCalcFitnessSimpleOp/>
        </PositiveOpSet>
        <NegativeOpSet>
          <MilestoneReadOp/>
        </NegativeOpSet>
      </IfThenElseOp>
      <TermMaxGenOp/>
      <MilestoneWriteOp/>
    </BootStrapSet>
    <MainLoopSet>
      <SelectTournamentOp repropb="ec.repro.prob"/>
      <GA-CrossoverOnePointBitStrOp matingpb="ga.cx1p.prob"/>
      <GA-MutationFlipBitStrOp mutationpb="ga.mutflip.indpb" mutbitpb="ga.mutflip.bitpb"/>
      <MaxFctEvalOp/>
      <MigrationRandomRingOp/>
      <StatsCalcFitnessSimpleOp/>
      <TermMaxGenOp/>
      <MilestoneWriteOp/>
    </MainLoopSet>
  </Evolver>
  <!-- Register: parameters of the evolution -->
  <Register>
    <Entry key="ec.hof.demesize">0</Entry><!-- ec.hof.demesize [UInt]: Number of individuals kept in each deme's hall-of-fame (best individuals so far). Note that a hall-of-fame contains only copies of the best individuals so far and is not used by the evolution process. -->
    <Entry key="ec.hof.vivasize">1</Entry><!-- ec.hof.vivasize [UInt]: Number of individuals kept in vivarium's hall-of-fame (best individuals so far). Note that a hall-of-fame contains only copies of the best individuals so far and is not used by the evolution process. -->
    <Entry key="ec.init.seedsfile"/><!-- ec.init.seedsfile [String]: Name of file to use for seeding the evolution with crafted individual. An empty string means no seeding. -->
    <Entry key="ec.mig.interval">1</Entry><!-- ec.mig.interval [UInt]: Interval between each migration, in number of generations. An interval of 0 disables migration. -->
    <Entry key="ec.mig.size">5</Entry><!-- ec.mig.size [UInt]: Number of individuals migrating between each deme, at a each migration. -->
    <Entry key="ec.pop.size">10</Entry><!-- ec.pop.size [IntegerVector]: Number of demes and size of each deme of the population. The format of an IntegerVector is S1/S2/.../Sn, where Si is the ith value. The size of the IntegerVector is the number of demes present in the vivarium, while each value of the vector is the size of the corresponding deme. -->
    <Entry key="ec.rand.seed">0</Entry><!-- ec.rand.seed [ULong]: Randomizer seed. A zero value means that the seed should be initialized using the current system time. -->
    <Entry key="ec.rand.state">0</Entry><!-- ec.rand.state [ULong]: Actual randomizer internal state. The state changes at every function call to the random number generator. This parameter is useful to get the correct randomizer state when an evolution is restarted from a milestone. The state must be set to 0 before starting a new evolution. -->
    <Entry key="ec.repro.prob">0.1</Entry><!-- ec.repro.prob [Float]: Probability than an individual is reproducted as is, without modification. This parameter is useful only in selection and initialization operators that are composing a breeder tree. -->
    <Entry key="ec.sel.tournsize">2</Entry><!-- ec.sel.tournsize [UInt]: Number of participants for tournament selection. -->
    <Entry key="ec.term.maxgen">5</Entry><!-- ec.term.maxgen [UInt]: Maximum number of generations for the evolution. A zero value means that there is no generation limit. -->
    <Entry key="ga.cx1p.prob">0.3</Entry><!-- ga.cx1p.prob [Float]: GA one-point crossover probability of a single individual. -->
    <Entry key="ga.init.bitpb">0.5</Entry><!-- ga.init.bitpb [Float]: Distribution probability of bit values. A probability of 1.0 means that the bits values are all initialized to 1, while a probability of 0.0 means that they are all initialized to 0. Probability of 0.5 means that the bits are uniformly, randomly initialized with equally 0s and 1s. -->
    <Entry key="ga.init.numberbits">125</Entry><!-- ga.init.numberbits [UInt]: Number of bits used to initialize individuals. -->
    <Entry key="ga.mutflip.bitpb">0.01</Entry><!-- ga.mutflip.bitpb [Float]: Probability for each bit to be inverted by mutation, when an individual is mutated. -->
    <Entry key="ga.mutflip.indpb">1</Entry><!-- ga.mutflip.indpb [Float]: Bit flip mutation probability for each GA individual. -->
    <Entry key="lg.console.enabled">0</Entry><!-- lg.console.enabled [Bool]: Flag whether logging is done to the console (STDOUT). -->
    <Entry key="lg.file.name">beagle.log</Entry>
	<Entry key="lg.file.level">6</Entry>
	<Entry key="lg.log.level">6</Entry><!-- lg.log.level [UInt]: Log level used during output generation. Log levels available are: (0) no log, (1) basic logs, (2) stats, (3) general informations, (4) details on operations, (5) trace of the algorithms, (6) verbose, (7) debug (enabled only in full debug mode). -->
    <Entry key="lg.show.class">0</Entry><!-- lg.show.class [Bool]: Flag whether class name is outputed in the logs. -->
    <Entry key="lg.show.level">0</Entry><!-- lg.show.level [Bool]: Flag whether logging level in outputed in the logs. -->
    <Entry key="lg.show.type">0</Entry><!-- lg.show.type [Bool]: Flag whether message type is outputed in the logs. -->
    <Entry key="ms.restart.file"/><!-- ms.restart.file [String]: Name of the milestone file from which the evolution should be restarted. An empty string means no restart. -->
    <Entry key="ms.write.compress">1</Entry><!-- ms.write.compress [Bool]: If true, this flag indicates that milestones will be compressed with gzip. Otherwise, each milestone are kept plain text. -->
    <Entry key="ms.write.interval">0</Entry><!-- ms.write.interval [UInt]: Milestone saving interval (in number of generations). When zero, only the last generation milestone is saved. -->
    <Entry key="ms.write.over">1</Entry><!-- ms.write.over [Bool]: If true, this flag indicates that old milestones should be over-written. Otherwise, each milestone has a different suffix. -->
    <Entry key="ms.write.perdeme">0</Entry><!-- ms.write.perdeme [Bool]: If true, this flag indicates that separate milestones should be written after each demes processing. Otherwise milestones are written after the processing of a complete populations. -->
  </Register>
</Beagle>