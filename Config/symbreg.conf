<?xml version="1.0" encoding="ISO-8859-1"?>
<Beagle version="3.0.3">
  <!--Created by a configuration dump-->
  <!--Evolver: configuration of the algorithm-->
  <Evolver>
    <BootStrapSet>
      <IfThenElseOp parameter="ms.restart.file" value="">
        <PositiveOpSet>
          <GP-InitHalfOp repropb="ec.repro.prob"/>
          <SymbRegEvalOp/>
          <GP-StatsCalcFitnessSimpleOp/>
          <GP-PrimitiveUsageStatsOp/>
        </PositiveOpSet>
        <NegativeOpSet>
          <MilestoneReadOp/>
        </NegativeOpSet>
      </IfThenElseOp>
      <TermMaxGenOp/>
      <TermMaxFitnessOp fitness="1"/>
      <MilestoneWriteOp/>
    </BootStrapSet>
    <MainLoopSet>
      <SelectTournamentOp repropb="ec.repro.prob"/>
      <GP-CrossoverOp matingpb="gp.cx.indpb" distrpb="gp.cx.distrpb"/>
      <GP-MutationStandardOp mutationpb="gp.mutstd.indpb" maxdepth="gp.mutstd.maxdepth"/>
      <GP-MutationShrinkOp mutationpb="gp.mutshrink.indpb"/>
      <GP-MutationSwapOp mutationpb="gp.mutswap.indpb" distrpb="gp.mutswap.distrpb"/>
      <GP-MutationSwapSubtreeOp mutationpb="gp.mutsst.indpb" distrpb="gp.mutsst.distrpb"/>
      <SymbRegEvalOp/>
      <MigrationRandomRingOp/>
      <GP-StatsCalcFitnessSimpleOp/>
      <GP-PrimitiveUsageStatsOp/>
      <TermMaxGenOp/>
      <TermMaxFitnessOp fitness="1"/>
      <MilestoneWriteOp/>
    </MainLoopSet>
  </Evolver>
  <!--System: setting of the evolution-->
  <System>
    <Register>
      <!--ec.hof.demesize [UInt]: Number of individuals kept in each deme's hall-of-fame (best individuals so far). Note that a hall-of-fame contains only copies of the best individuals so far and is not used by the evolution process.-->
      <Entry key="ec.hof.demesize">0</Entry>
      <!--ec.hof.vivasize [UInt]: Number of individuals kept in vivarium's hall-of-fame (best individuals so far). Note that a hall-of-fame contains only copies of the best individuals so far and is not used by the evolution process.-->
      <Entry key="ec.hof.vivasize">1</Entry>
      <!--ec.init.seedsfile [String]: Name of file to use for seeding the evolution with crafted individual. An empty string means no seeding.-->
      <Entry key="ec.init.seedsfile"/>
      <!--ec.mig.interval [UInt]: Interval between each migration, in number of generations. An interval of 0 disables migration.-->
      <Entry key="ec.mig.interval">1</Entry>
      <!--ec.mig.size [UInt]: Number of individuals migrating between each deme, at a each migration.-->
      <Entry key="ec.mig.size">5</Entry>
      <!--ec.mpi.size [Int]: Specify the number of concurent process used to evaluate individuals-->
      <Entry key="ec.mpi.size">1</Entry>
      <!--ec.pop.size [IntegerVector]: Number of demes and size of each deme of the population. The format of an IntegerVector is S1/S2/.../Sn, where Si is the ith value. The size of the IntegerVector is the number of demes present in the vivarium, while each value of the vector is the size of the corresponding deme.-->
      <Entry key="ec.pop.size">100</Entry>
      <!--ec.rand.seed [ULong]: Randomizer seed. A zero value means that the seed will be initialized using the /dev/urandom device.-->
      <Entry key="ec.rand.seed">0</Entry>
      <!--ec.repro.prob [Float]: Probability that an individual is reproducted as is, without modification. This parameter is useful only in selection and initialization operators that are composing a breeder tree.-->
      <Entry key="ec.repro.prob">0.1</Entry>
      <!--ec.sel.tournsize [UInt]: Number of participants for tournament selection.-->
      <Entry key="ec.sel.tournsize">2</Entry>
      <!--ec.term.maxfitness [Float]: Fitness value to reach before stopping evolution.-->
      <Entry key="ec.term.maxfitness">1</Entry>
      <!--ec.term.maxgen [UInt]: Maximum number of generations for the evolution.-->
      <Entry key="ec.term.maxgen">50</Entry>
      <!--gp.cx.distrpb [Float]: Probability that a crossover point is a branch (node with sub-trees). Value of 1.0 means that all crossover points are branches, and value of 0.0 means that all crossover points are leaves.-->
      <Entry key="gp.cx.distrpb">0.9</Entry>
      <!--gp.cx.indpb [Float]: Individual crossover probability at each generation.-->
      <Entry key="gp.cx.indpb">0.9</Entry>
      <!--gp.init.maxargs [UIntArray]: Maximum number of arguments in GP tree. Tree arguments are is usually useful with ADFs (and similar stuff).-->
      <Entry key="gp.init.maxargs">0,2</Entry>
      <!--gp.init.maxdepth [UInt]: Maximum depth for newly initialized trees.-->
      <Entry key="gp.init.maxdepth">5</Entry>
      <!--gp.init.maxtree [UInt]: Maximum number of GP tree in newly initialized individuals. More than one tree is usually useful with ADFs (and other ADx).-->
      <Entry key="gp.init.maxtree">1</Entry>
      <!--gp.init.minargs [UIntArray]: Minimum number of arguments in GP tree. Tree arguments are is usually useful with ADFs a(nd similar stuff).-->
      <Entry key="gp.init.minargs">0,2</Entry>
      <!--gp.init.mindepth [UInt]: Minimum depth for newly initialized trees.-->
      <Entry key="gp.init.mindepth">2</Entry>
      <!--gp.init.mintree [UInt]: Minimum number of GP tree in newly initialized individuals. More than one tree is usually useful with ADFs (and other ADx).-->
      <Entry key="gp.init.mintree">1</Entry>
      <!--gp.mutshrink.indpb [Float]: Shrink mutation probability for an individual. Shrink mutation consists in replacing a branch (a node with one or more arguments) with one of his child node. This erases the chosen node and the other child nodes.-->
      <Entry key="gp.mutshrink.indpb">2</Entry>
      <!--gp.mutsst.distrpb [Float]: Probability that a swap subtree is internal (the mutation occurs between three points, where the 2nd point is in the 1st point's subtree, and the 3rd point is in the 2nd point's subtree) vs being external (the mutation occurs between two points, where both points are not within the other's subtree). Value of 1.0 means that the swap subtrees mutations are all internal while value of 0.0 means that swap subtrees mutations are all external.-->
      <Entry key="gp.mutsst.distrpb">0.5</Entry>
      <!--gp.mutsst.indpb [Float]: Swap subtree mutation probability for an individual. A swap subtree mutation consists to swap two subtrees of a tree in an individual.-->
      <Entry key="gp.mutsst.indpb">0</Entry>
      <!--gp.mutstd.indpb [Float]: Standard mutation probability for an individual. A standard mutation replaces a sub-tree with a randomly generated one.-->
      <Entry key="gp.mutstd.indpb">0.05</Entry>
      <!--gp.mutstd.maxdepth [UInt]: Maximum depth for standard mutation. A standard mutation replaces a sub-tree with a randomly generated one.-->
      <Entry key="gp.mutstd.maxdepth">5</Entry>
      <!--gp.mutswap.distrpb [Float]: Probability that a swap mutation point is a branch (node with sub-trees). Value of 1.0 means that all swap mutation points are branches, and value of 0.0 means that all swap mutation points are leaves. Swap mutation consists in exchanging the primitive associated to a node by one having the same number of arguments.-->
      <Entry key="gp.mutswap.distrpb">0.5</Entry>
      <!--gp.mutswap.indpb [Float]: Swap mutation probability for an individual. Swap mutation consists in exchanging the primitive associated to a node by one having the same number of arguments.-->
      <Entry key="gp.mutswap.indpb">0.05</Entry>
      <!--gp.tree.maxdepth [UInt]: Maximum allowed depth for the trees.-->
      <Entry key="gp.tree.maxdepth">17</Entry>
      <!--gp.try [UInt]: Maximum number of attempts to modify a GP tree in a genetic operation. As there is topological constraints on GP trees (i.e. tree depth limit), it is often necessary to try a genetic operation several times.-->
      <Entry key="gp.try">2</Entry>
      <!--lg.console.level [UInt]: Log level used for console output generation. Log levels available are: (0) no log, (1) basic logs, (2) stats, (3) general informations, (4) details on operations, (5) trace of the algorithms, (6) verbose, (7) debug (enabled only in full debug mode).-->
      <Entry key="lg.console.level">2</Entry>
      <!--lg.file.level [UInt]: Log level used for file output generation. Log levels available are: (0) no log, (1) basic logs, (2) stats, (3) general informations, (4) details on operations, (5) trace of the algorithms, (6) verbose, (7) debug (enabled only in full debug mode).-->
      <Entry key="lg.file.level">6</Entry>
      <!--lg.file.name [String]: Filename in which messages are outputed. An empty string file name means no output is done to a file.-->
      <Entry key="lg.file.name">beagle.log</Entry>
      <!--lg.show.class [Bool]: Flag whether class name is outputed in the logs.-->
      <Entry key="lg.show.class">0</Entry>
      <!--lg.show.level [Bool]: Flag whether logging level in outputed in the logs.-->
      <Entry key="lg.show.level">0</Entry>
      <!--lg.show.type [Bool]: Flag whether message type is outputed in the logs.-->
      <Entry key="lg.show.type">0</Entry>
      <!--ms.restart.file [String]: Name of the milestone file from which the evolution should be restarted. An empty string means no restart.-->
      <Entry key="ms.restart.file"/>
      <!--ms.write.compress [Bool]: If true, this flag indicates that milestones will be compressed with gzip. Otherwise, each milestone are kept plain text.-->
      <Entry key="ms.write.compress">1</Entry>
      <!--ms.write.interval [UInt]: Milestone saving interval (in number of generations). When zero, only the last generation milestone is saved.-->
      <Entry key="ms.write.interval">0</Entry>
      <!--ms.write.over [Bool]: If true, this flag indicates that old milestones should be over-written. Otherwise, each milestone has a different suffix.-->
      <Entry key="ms.write.over">1</Entry>
      <!--ms.write.perdeme [Bool]: If true, this flag indicates that separate milestones should be written after each demes processing. Otherwise milestones are written after the processing of a complete populations.-->
      <Entry key="ms.write.perdeme">0</Entry>
      <!--ms.write.prefix [String]: Prefix used to name the evolution milestone files. An empty string means no milestone.-->
      <Entry key="ms.write.prefix">beagle</Entry>
    </Register>
  </System>
</Beagle>
